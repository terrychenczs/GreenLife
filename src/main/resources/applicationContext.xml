<?xml version="1.0" encoding="utf-8"?>  
  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans       
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     
     http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd   
     http://www.springframework.org/schema/tx      
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd       
      http://www.springframework.org/schema/aop       
      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd       
      http://www.springframework.org/schema/context       
      http://www.springframework.org/schema/context/spring-context-3.0.xsd">  
        
    <!-- 第一步：【1.整合dao】 将Mybatis和Spring进行整合MyBatis和Spring整合，通过Spring管理mapper接口。使用mapper的扫描器自动扫描mapper接口在Spring中进行注册。 -->  
    <!-- 需要配置：a、数据源 b、SqlSessionFactory c、mapper扫描器 -->  
    <!-- 1、数据源定义 -->  
    <!-- （1）加载jdbc.properties、redis.properties文件中的内容 -->  
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>  
                <value>classpath:jdbc.properties</value>  
<!--                 <value>classpath:redis.properties</value> -->  
            </list>  
        </property>  
    </bean>  
    <!-- （2）mysql数据源配置 -->  
    <!-- a、数据源 -->  
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${connection.driverClassName}" />  
        <property name="url" value="${connection.url}" />  
        <property name="username" value="${connection.username}" />  
        <property name="password" value="${connection.password}" />  
        <property name="maxActive" value="${connection.maxActive}" />  
        <property name="maxIdle" value="${connection.maxIdle}" />  
        <property name="minIdle" value="${connection.minIdle}" />  
        <property name="removeAbandoned" value="${connection.removeAbandoned}" />  
        <property name="removeAbandonedTimeout" value="${connection.removeAbandonedTimeout}" />  
        <property name="logAbandoned" value="${connection.logAbandoned}" />  
        <property name="defaultAutoCommit" value="${connection.defaultAutoCommit}" />  
        <property name="defaultReadOnly" value="${connection.defaultReadOnly}" />  
        <property name="validationQuery" value="${connection.validationQuery}" />  
        <property name="testOnBorrow" value="${connection.testOnBorrow}" />  
    </bean>  
    <!-- b、sqlSessionFactory：创建sqlSessionFactory，同时指定数据源 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
        <property name="configLocation" value="classpath:mybatis-config.xml" />  
        <!-- 自动扫描mapper目录, 省掉mybatis-config.xml里的手工配置 -->  
        <property name="mapperLocations">  
            <list>  
                <value>classpath:com/czs/dao/xml/*.xml</value>  
            </list>  
        </property>  
    </bean>  
    <!-- c、mapper扫描器：通过扫描的模式，扫描目录在com/czs/mapper目录下 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.czs.dao.mapper" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />  
    </bean>  
    <!-- 第二步：通过Spring管理Service接口。使用配置方式将Service接口配置在Spring配置文件中。实现事务控制。 -->  
    <!-- (事务管理) -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource"></property>  
    </bean>  
    <!-- 使用annotation定义数据库事务，这样可以在类或方法中直接使用@Transactional注解来声明事务 -->  
    <tx:annotation-driven transaction-manager="transactionManager" />  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <tx:method name="load*" propagation="SUPPORTS" read-only="true" />  
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />  
            <tx:method name="search*" propagation="SUPPORTS" read-only="true" />  
            <tx:method name="approve" propagation="REQUIRED" />  
            <tx:method name="undo" propagation="REQUIRED" />  
            <tx:method name="*" propagation="SUPPORTS" read-only="true" />  
        </tx:attributes>  
    </tx:advice>  
    <aop:config>  
        <aop:pointcut id="serviceMethod"  
            expression="execution(* com.czs.service..*.*(..))" />  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod" />  
    </aop:config>  
    <!-- spring管理：自动搜索注解路径 在xml配置了这个标签后，spring可以自动去扫描base-pack下面或者子包下面的Java文件，如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean-->    
    <context:component-scan base-package="com.czs"></context:component-scan>    
</beans>  